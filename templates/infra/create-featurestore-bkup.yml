# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
  - name: featurestore_sql_username
    type: string
    default: "sqladmin"
  - name: featurestore_sql_password
    type: string
    default: "ThisIsNotVerySecure!"

steps:
  - task: AzureCLI@2
    displayName: "gather required environment variables"
    inputs:
      azureSubscription: "$(ado_service_connection_rg)"
      scriptType: "bash"
      addSpnToEnvironment: true
      scriptLocation: "inlineScript"
      inlineScript: |
        if [[ ! -z "${servicePrincipalId:-}" ]]; then
          SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
        else
          SUBSCRIPTION_ID=
        fi

        # Define environment variables
        echo "##vso[task.setvariable variable=SUBSCRIPTION_ID]'$SUBSCRIPTION_ID'"

  - task: AzureCLI@2
    displayName: "AAD app registration steps for the feather app"
    inputs:
      azureSubscription: "$(ado_service_connection_rg)"
      scriptType: "bash"
      addSpnToEnvironment: true
      scriptLocation: "inlineScript"
      inlineScript: |
        # Use the following configuration command to enable dynamic install of az extensions without a prompt. This is required for the az account command group used in the following steps.
        az config set extension.use_dynamic_install=yes_without_prompt

        # Please don't change this name, a corresponding webapp with same name gets created in subsequent steps.
        sitename="$(feathrprefix)webapp"
        echo "sitename set to: $sitename"

        # This will create the Azure AD application, note that we need to create an AAD app of platform type Single Page Application(SPA). By default passing the redirect-uris with create command creates an app of type web. Setting Sign in audience to AzureADMyOrg limits the application access to just your tenant.
        az ad app create --display-name $sitename --sign-in-audience AzureADMyOrg --web-home-page-url "https://$sitename.azurewebsites.net" --enable-id-token-issuance true

        # It might take a few seconds for the above step to complete, so we wait
        while [ -z "$aad_clientId" ]; 
        do
          # Fetch the ClientId, TenantId and ObjectId for the created app
          aad_clientId=$(az ad app list --display-name $sitename --query [].appId -o tsv)
        done

        # We just use the homeTenantId since a user could have access to multiple tenants
        aad_tenantId=$(az account show --query "[homeTenantId]" -o tsv)

        #Fetch the objectId of AAD app to patch it and add redirect URI in next step.
        aad_objectId=$(az ad app list --display-name $sitename --query [].id -o tsv)

        # Updating the SPA app created above, currently there is no CLI support to add redirectUris to a SPA, so we have to patch manually via az rest
        az rest --method PATCH --uri "https://graph.microsoft.com/v1.0/applications/$aad_objectId" --headers "Content-Type=application/json" --body "{spa:{redirectUris:['https://$sitename.azurewebsites.net']}}

        # Define environment variables
        echo "##vso[task.setvariable variable=AZURE_AAD_OBJECT_ID]'$aad_objectId'"
        echo "##vso[task.setvariable variable=AAD_CLIENT_ID]'$aad_clientId'"
        echo "##vso[task.setvariable variable=AZURE_TENANT_ID]'$aad_tenantId'"

  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Create Resources for Feature Store"
    inputs:
      deploymentScope: "Resource Group"
      azureResourceManagerConnection: $(ado_service_connection_rg)
      subscriptionId: $(SUBSCRIPTION_ID)
      action: "Create Or Update Resource Group"
      resourceGroupName: $(terraform_st_resource_group)
      location: $(location)
      templateLocation: "Linked artifact"
      csmFile: "templates/infra/feature_store/azuredeploy.json"
      csmParametersFile: "templates/infra/feature_store/azuredeploy.parameters.json"
      overrideParameters: "-sqlAdminUsername ${{parameters.featurestore_sql_username}} -sqlAdminPassword ${{parameters.featurestore_sql_password}} -resourcePrefix $(feathrprefix) -azureADClientId $(AAD_CLIENT_ID) -azureADTenantId $(AZURE_TENANT_ID)"
      deploymentMode: "Complete"
      deploymentName: "Create Resources for Feature Store"

  - task: AzureCLI@2
    displayName: "Grant Key Vault and Synapse access to selected users"
    inputs:
      azureSubscription: "$(ado_service_connection_rg)"
      scriptType: "bash"
      addSpnToEnvironment: true
      scriptLocation: "inlineScript"
      inlineScript: |
        userId="${featurestore_user}"
        resource_prefix="${feathrprefix}"
        synapse_workspace_name="${resource_prefix}syws"
        keyvault_name="${resource_prefix}kv"
        objectId=$(az ad user show --id $userId --query id -o tsv)
        az keyvault update --name $keyvault_name --enable-rbac-authorization false
        az keyvault set-policy -n $keyvault_name --secret-permissions get list --object-id $objectId
        az role assignment create --assignee $userId --role "Storage Blob Data Contributor"
        az synapse role assignment create --workspace-name $synapse_workspace_name --role "Synapse Contributor" --assignee $userId
